// Generated by view binder compiler. Do not edit!
package com.kylinxin.myweather.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kylinxin.myweather.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout NormalStatus;

  @NonNull
  public final RecyclerView Recycler24H;

  @NonNull
  public final RecyclerView Recycler7D;

  @NonNull
  public final TextView bodyTmp;

  @NonNull
  public final TextView bodyTmpTitle;

  @NonNull
  public final TextView cloud;

  @NonNull
  public final TextView cloudTitle;

  @NonNull
  public final TextView hum;

  @NonNull
  public final TextView humTitle;

  @NonNull
  public final LinearLayout mainLinearLayout;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final TextView normalCity;

  @NonNull
  public final TextView normalStatus;

  @NonNull
  public final TextView normalTemp;

  @NonNull
  public final TextView pressure;

  @NonNull
  public final TextView pressureTitle;

  @NonNull
  public final TextView visibility;

  @NonNull
  public final TextView visibilityTitle;

  @NonNull
  public final TextView windDirection;

  @NonNull
  public final TextView windSpeed;

  @NonNull
  public final TextView windTitle;

  private ActivityMainBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout NormalStatus,
      @NonNull RecyclerView Recycler24H, @NonNull RecyclerView Recycler7D,
      @NonNull TextView bodyTmp, @NonNull TextView bodyTmpTitle, @NonNull TextView cloud,
      @NonNull TextView cloudTitle, @NonNull TextView hum, @NonNull TextView humTitle,
      @NonNull LinearLayout mainLinearLayout, @NonNull NestedScrollView nestedScrollView,
      @NonNull TextView normalCity, @NonNull TextView normalStatus, @NonNull TextView normalTemp,
      @NonNull TextView pressure, @NonNull TextView pressureTitle, @NonNull TextView visibility,
      @NonNull TextView visibilityTitle, @NonNull TextView windDirection,
      @NonNull TextView windSpeed, @NonNull TextView windTitle) {
    this.rootView = rootView;
    this.NormalStatus = NormalStatus;
    this.Recycler24H = Recycler24H;
    this.Recycler7D = Recycler7D;
    this.bodyTmp = bodyTmp;
    this.bodyTmpTitle = bodyTmpTitle;
    this.cloud = cloud;
    this.cloudTitle = cloudTitle;
    this.hum = hum;
    this.humTitle = humTitle;
    this.mainLinearLayout = mainLinearLayout;
    this.nestedScrollView = nestedScrollView;
    this.normalCity = normalCity;
    this.normalStatus = normalStatus;
    this.normalTemp = normalTemp;
    this.pressure = pressure;
    this.pressureTitle = pressureTitle;
    this.visibility = visibility;
    this.visibilityTitle = visibilityTitle;
    this.windDirection = windDirection;
    this.windSpeed = windSpeed;
    this.windTitle = windTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.NormalStatus;
      LinearLayout NormalStatus = ViewBindings.findChildViewById(rootView, id);
      if (NormalStatus == null) {
        break missingId;
      }

      id = R.id.Recycler_24H;
      RecyclerView Recycler24H = ViewBindings.findChildViewById(rootView, id);
      if (Recycler24H == null) {
        break missingId;
      }

      id = R.id.Recycler_7D;
      RecyclerView Recycler7D = ViewBindings.findChildViewById(rootView, id);
      if (Recycler7D == null) {
        break missingId;
      }

      id = R.id.bodyTmp;
      TextView bodyTmp = ViewBindings.findChildViewById(rootView, id);
      if (bodyTmp == null) {
        break missingId;
      }

      id = R.id.bodyTmpTitle;
      TextView bodyTmpTitle = ViewBindings.findChildViewById(rootView, id);
      if (bodyTmpTitle == null) {
        break missingId;
      }

      id = R.id.cloud;
      TextView cloud = ViewBindings.findChildViewById(rootView, id);
      if (cloud == null) {
        break missingId;
      }

      id = R.id.cloudTitle;
      TextView cloudTitle = ViewBindings.findChildViewById(rootView, id);
      if (cloudTitle == null) {
        break missingId;
      }

      id = R.id.hum;
      TextView hum = ViewBindings.findChildViewById(rootView, id);
      if (hum == null) {
        break missingId;
      }

      id = R.id.humTitle;
      TextView humTitle = ViewBindings.findChildViewById(rootView, id);
      if (humTitle == null) {
        break missingId;
      }

      LinearLayout mainLinearLayout = (LinearLayout) rootView;

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.normal_city;
      TextView normalCity = ViewBindings.findChildViewById(rootView, id);
      if (normalCity == null) {
        break missingId;
      }

      id = R.id.normal_status;
      TextView normalStatus = ViewBindings.findChildViewById(rootView, id);
      if (normalStatus == null) {
        break missingId;
      }

      id = R.id.normal_temp;
      TextView normalTemp = ViewBindings.findChildViewById(rootView, id);
      if (normalTemp == null) {
        break missingId;
      }

      id = R.id.pressure;
      TextView pressure = ViewBindings.findChildViewById(rootView, id);
      if (pressure == null) {
        break missingId;
      }

      id = R.id.pressureTitle;
      TextView pressureTitle = ViewBindings.findChildViewById(rootView, id);
      if (pressureTitle == null) {
        break missingId;
      }

      id = R.id.visibility;
      TextView visibility = ViewBindings.findChildViewById(rootView, id);
      if (visibility == null) {
        break missingId;
      }

      id = R.id.visibilityTitle;
      TextView visibilityTitle = ViewBindings.findChildViewById(rootView, id);
      if (visibilityTitle == null) {
        break missingId;
      }

      id = R.id.windDirection;
      TextView windDirection = ViewBindings.findChildViewById(rootView, id);
      if (windDirection == null) {
        break missingId;
      }

      id = R.id.windSpeed;
      TextView windSpeed = ViewBindings.findChildViewById(rootView, id);
      if (windSpeed == null) {
        break missingId;
      }

      id = R.id.windTitle;
      TextView windTitle = ViewBindings.findChildViewById(rootView, id);
      if (windTitle == null) {
        break missingId;
      }

      return new ActivityMainBinding((LinearLayout) rootView, NormalStatus, Recycler24H, Recycler7D,
          bodyTmp, bodyTmpTitle, cloud, cloudTitle, hum, humTitle, mainLinearLayout,
          nestedScrollView, normalCity, normalStatus, normalTemp, pressure, pressureTitle,
          visibility, visibilityTitle, windDirection, windSpeed, windTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
